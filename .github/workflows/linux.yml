name: Linux ci

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  #pull_request:
  #  branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:







  pragma_check:

    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10' 

      - name: Pragma check
        run: python buildbot/check_pragma_once.py


  copyright_check:

    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10' 

      - name: Licence check
        run: python buildbot/check_licencing.py



  # download and cache dpcpp compiler
  cache_dpcpp:
    runs-on: ubuntu-latest

    needs: [pragma_check, copyright_check]

    
    steps:
        
      - name: Cache DPCPP
        id: cache-dpcpp
        uses: actions/cache@v3
        with:
          path: dpcpp_compiler
          key: sycl-nightly%2F20230112_dpcpp-compiler.tar.gz
      
      - name : Download & Untar DPCPP
        if: steps.cache-dpcpp.outputs.cache-hit != 'true'
        run: |
          export DPCPP_URL="https://github.com/intel/llvm/releases/download/sycl-nightly%2F20230112/dpcpp-compiler.tar.gz"
          wget -q --show-progress --progress=bar:force:noscroll "$DPCPP_URL" -O dpcpp-compiler.tar.gz
          echo "untar : "
          tar -xf dpcpp-compiler.tar.gz
          echo "rm archive"
          rm dpcpp-compiler.tar.gz
  
  # download ,build and cache opensycl compiler
  cache_opensycl:
    runs-on: ubuntu-latest

    needs: [pragma_check, copyright_check]

    steps:

      - name: clone OpenSycl
        run: git clone --recurse-submodules https://github.com/OpenSYCL/OpenSYCL.git

      - name: install boost
        run: sudo apt install libboost-all-dev

      - name: install LLVM
        run: |
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh 15
          sudo apt install libclang-15-dev clang-tools-15 libomp-15-dev libllvm-15-ocaml-dev libllvm15 llvm-15 llvm-15-dev llvm-15-doc llvm-15-examples llvm-15-runtime

      - name: install Ninja-build
        run: sudo apt install ninja-build


      - name: configure & install OpenSycl
        run: |
          cd OpenSYCL
          cmake -DCMAKE_CXX_COMPILER=/usr/bin/clang++-15 -DCLANG_EXECUTABLE_PATH=/usr/bin/clang++-15 -DLLVM_DIR=/usr/lib/llvm-15/cmake -DCMAKE_INSTALL_PREFIX=../OpenSYCL_comp .
          make -j install

      - name: 'Tar opensycl'
        run: tar -cvf opensycl.tar OpenSYCL_comp

      - name: 'Upload Artifact'
        uses: actions/upload-artifact@v3
        with:
          name: OpenSYCL_compiler
          path: opensycl.tar  
      

  #make shamrock documentation
  make_documentation:

    runs-on: ubuntu-latest

    needs: [pragma_check, copyright_check]
    
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10' 

      - name: pip install packages
        run: pip install -U jupyter-book sphinx_proof matplotlib numpy

      - name : Install pck (doxygen)
        run: |
          sudo apt-get install -y -qq doxygen

      - name: Gen doc
        run: |
          cd doc
          sh make_doc.sh

      - name: 'Tar doc'
        run: tar -cvf doc.tar doc/_build

      - name: Archive generated doc
        uses: actions/upload-artifact@v3
        with:
          name: shamrock_documentation
          path: documentation.tar.gz





  ### build jobs

  shamrock_dpcpp:

    runs-on: ubuntu-latest
    
    needs: cache_dpcpp
    
    steps:
    
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10' 
          
      - name : Install pck (DPCPP)
        run: |
          sudo apt-get install -y -qq g++-10 clang libomp-dev libtinfo5
          
      - name: Cache DPCPP
        id: cache-dpcpp
        uses: actions/cache@v3
        with:
          path: dpcpp_compiler
          key: sycl-nightly%2F20230112_dpcpp-compiler.tar.gz
          
      - name : Check binary
        run: |
          dpcpp_compiler/bin/clang++ --version
  
  shamrock_opensycl_omp_debug:

    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    needs: cache_opensycl

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: 'Download Artifact'
        uses: actions/download-artifact@v3
        with:
          name: OpenSYCL_compiler

      - name: 'unTar opensycl'
        run: tar -xvf opensycl.tar

      - name: ls local
        run : ls -la

      - name: install boost
        run: sudo apt install libboost-all-dev

      - name: install LLVM
        run: |
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh 15
          sudo apt install libclang-15-dev clang-tools-15 libomp-15-dev libllvm-15-ocaml-dev libllvm15 llvm-15 llvm-15-dev llvm-15-doc llvm-15-examples llvm-15-runtime

      - name: install Ninja-build
        run: sudo apt install ninja-build

      - name: configure Shamrock
        run: |
          python3 buildbot/configure.py --gen ninja --tests --build debug \
            --outdir opensycl_omp_debug --cxxpath OpenSYCL_comp --compiler opensycl --profile omp_coverage

      - name: compile Shamrock
        run: |
          cd opensycl_omp_debug
          ninja

      - name: run Shamrock Unittests world_size = 1
        run: |
          cd opensycl_omp_debug
          LLVM_PROFILE_FILE="utests_0_0.profraw" ./shamrock_test --sycl-cfg 0:0 --loglevel 0 --unittest

      - name: run Shamrock Unittests world_size = 2
        run: |
          cd opensycl_omp_debug
          mpirun \
            -n 1 -x LLVM_PROFILE_FILE=utests_2_0.profraw ./shamrock_test --sycl-cfg 0:0 --loglevel 0 --unittest : \
            -n 1 -x LLVM_PROFILE_FILE=utests_2_1.profraw ./shamrock_test --sycl-cfg 0:0 --loglevel 0 --unittest
      
      - name: run Shamrock Unittests world_size = 3
        run: |
          cd opensycl_omp_debug
          mpirun --oversubscribe \
            -n 1 -x LLVM_PROFILE_FILE=utests_3_0.profraw ./shamrock_test --sycl-cfg 0:0 --loglevel 0 --unittest : \
            -n 1 -x LLVM_PROFILE_FILE=utests_3_1.profraw ./shamrock_test --sycl-cfg 0:0 --loglevel 0 --unittest : \
            -n 1 -x LLVM_PROFILE_FILE=utests_3_2.profraw ./shamrock_test --sycl-cfg 0:0 --loglevel 0 --unittest

      - name: run Shamrock Unittests world_size = 4
        run: |
          cd opensycl_omp_debug
          mpirun --oversubscribe \
            -n 1 -x LLVM_PROFILE_FILE=utests_4_0.profraw ./shamrock_test --sycl-cfg 0:0 --loglevel 0 --unittest : \
            -n 1 -x LLVM_PROFILE_FILE=utests_4_1.profraw ./shamrock_test --sycl-cfg 0:0 --loglevel 0 --unittest : \
            -n 1 -x LLVM_PROFILE_FILE=utests_4_2.profraw ./shamrock_test --sycl-cfg 0:0 --loglevel 0 --unittest : \
            -n 1 -x LLVM_PROFILE_FILE=utests_4_3.profraw ./shamrock_test --sycl-cfg 0:0 --loglevel 0 --unittest

      - name: merge coverage reports
        run: |
          cd opensycl_omp_debug
          llvm-profdata-15 merge -sparse utests_* -o utests.profdata


      - name: print coverage
        run: |
          cd opensycl_omp_debug
          llvm-cov-15 report shamrock_test -instr-profile=utests.profdata > coverage_list.txt
          llvm-cov-15 show shamrock_test -instr-profile=utests.profdata -format=html -output-dir=out_cov -Xdemangler c++filt -Xdemangler -n -ignore-filename-regex=".*\Tests.cpp$|.*\Tests.hpp$|.*\shamtest.cpp|.*\shamtest.hpp|.*\main_test.cpp|.*\aliases.hpp"

      - name: Archive code coverage results 1
        uses: actions/upload-artifact@v3
        with:
          name: code-coverage-list-opensycl_omp_debug
          path: opensycl_omp_debug/coverage_list.txt

      - name: Archive code coverage results 2
        uses: actions/upload-artifact@v3
        with:
          name: code-coverage-report-opensycl_omp_debug
          path: opensycl_omp_debug/out_cov/

  publish_release:

    runs-on: ubuntu-latest
    
    needs: [shamrock_opensycl_omp_debug, shamrock_dpcpp, make_documentation]

    if: github.ref == 'refs/heads/main'

    steps:

      - uses: actions/checkout@v3
        with:
          submodules: recursive


      - name: 'Download Doc'
        uses: actions/download-artifact@v3
        with:
          name: shamrock_documentation
          path: documentation.tar.gz

      - name: 'Download coverage list'
        uses: actions/download-artifact@v3
        with:
          name: code-coverage-list-opensycl_omp_debug
          path: code-coverage-list-opensycl_omp_debug

      - name: 'Download coverage list'
        uses: actions/download-artifact@v3
        with:
          name: code-coverage-report-opensycl_omp_debug
          path: code-coverage-report-opensycl_omp_debug

      
      - name: 'Tar coverage'
        run: tar -cvf coverage.tar.gz code-coverage-list-opensycl_omp_debug code-coverage-report-opensycl_omp_debug


      - name: ls local
        run : ls -la

      - uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "latest"
          prerelease: true
          title: "Current Build"
          files: |
            LICENSE
            documentation.tar.gz
            coverage.tar.gz
