name: Acpp/clang15 (Clang-tidy)


on:
  workflow_call:

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:


jobs:

  shamrock_acpp_omp_tidy:
    name: AdaptiveCpp omp tidy clang-${{ matrix.clang }}
    runs-on: [self-hosted,  docker-runner]

    container:
      image: ${{ matrix.container }}
      

    strategy:
      matrix:
        include: 
          - clang: 15
            cuda: 11.0.2
            rocm: 5.4.3
            container: ghcr.io/shamrock-code/ci-ubuntu20:main
    #if: false
  
    timeout-minutes: 60
    steps:
      #### Checkout part ####
      # Checkout merge commit if PR otherwise default
      - uses: actions/checkout@v4
        if: github.event_name == 'pull_request_target'
        with:
          fetch-depth: 0
          submodules: recursive
          ref: "${{ github.event.pull_request.merge_commit_sha }}"

      - uses: actions/checkout@v4
        if: github.event_name != 'pull_request_target'
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Show diff against main
        if: github.event_name == 'pull_request_target'
        run: git diff ${{ github.event.pull_request.base.sha }} HEAD 
      #### End Checkout part ####
  
      - name: ls local
        run : ls -la
      
      - name: install LLVM
        run: |
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh ${{matrix.clang}}
          sudo apt install -y libclang-${{matrix.clang}}-dev clang-tools-${{matrix.clang}} libomp-${{matrix.clang}}-dev
          if [[ "${{matrix.clang}}" == "16" ]]; then
            sudo rm -r /usr/lib/clang/16*
            sudo ln -s /usr/lib/llvm-16/lib/clang/16 /usr/lib/clang/16
          fi
          

      - name: configure Shamrock
        run: |
          ./env/new-env --machine debian-generic.acpp --builddir build -- --backend omp
  
      - name: Configure
        shell: bash # In docker container github action default to sh
        # we need to run shamconfigure twice because compile_commands is not generated otherwise
        # with this docker image, i never saw this behavior before
        run: |
          cd build
          source activate && shamconfigure && shamconfigure

      - name: Generate version file
        run: |
          cd build
          ninja src/CMakeFiles/shamrock_lib.dir/version.cpp.o

      - name: Copy DB
        run: |
          ls build
          python3 ./buildbot/make_clang_tidy_db.py 

      - name: Install clang-tidy
        run: |
          sudo apt install clang-tidy-15

      - name: Run clang-tidy
        run: |
          run-clang-tidy-15 -p build/clang-tidy.mod -use-color -config-file .clang-tidy -export-fixes clang-tidy_results.yaml -extra-arg-before="-Wno-unused-command-line-argument"
