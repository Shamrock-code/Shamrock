name: DPCPP


on:
  workflow_call:
    
jobs:
  nightly_build20230112:
    name: Cache Nightly build 2023-01-12
    runs-on: [self-hosted]
    
    steps:
        
      - name: Cache DPCPP
        id: cache-dpcpp
        uses: actions/cache@v3
        with:
          path: dpcpp_compiler
          key: dpcpp-nighly20230112.tar.gz
      
      - name : Download & Untar DPCPP
        if: steps.cache-dpcpp.outputs.cache-hit != 'true'
        run: |
          export DPCPP_URL="https://github.com/intel/llvm/releases/download/sycl-nightly%2F20230112/dpcpp-compiler.tar.gz"
          wget -q --show-progress --progress=bar:force:noscroll "$DPCPP_URL" -O dpcpp-compiler.tar.gz
          echo "untar : "
          tar -xf dpcpp-compiler.tar.gz
          echo "rm archive"
          rm dpcpp-compiler.tar.gz

  cuda_build:

    name: Cache CUDA ${{ matrix.cuda }}
    runs-on: [self-hosted]

    strategy:
      matrix:
        cuda: [11.0.2]
    
    steps:
        
      - name: Cache DPCPP
        id: cache-dpcpp
        uses: actions/cache@v3
        with:
          path: dpcpp_compiler
          key: dpcpp-cuda-${{ matrix.cuda }}.tar.gz

      - name: install latest cmake
        run: |
          sudo apt-get update
          sudo apt-get install -y ca-certificates gpg wget
          wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | sudo tee /usr/share/keyrings/kitware-archive-keyring.gpg >/dev/null
          echo 'deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ focal main' | sudo tee /etc/apt/sources.list.d/kitware.list >/dev/null
          sudo apt-get update
          sudo rm /usr/share/keyrings/kitware-archive-keyring.gpg
          sudo apt-get install -y kitware-archive-keyring
          sudo apt-get update
          sudo apt-get install -y cmake

      - name: install CUDA
        if: steps.cache-dpcpp.outputs.cache-hit != 'true'
        run: |
          mkdir -p ~/opt/cuda
          wget -q -O cuda.sh http://developer.download.nvidia.com/compute/cuda/11.0.2/local_installers/cuda_11.0.2_450.51.05_linux.run
          sudo sh ./cuda.sh --override --silent --toolkit --no-man-page --no-drm --no-opengl-libs --installpath=~/opt/cuda || true
          echo "CUDA Version ${{matrix.cuda}}" | sudo tee ~/opt/cuda/version.txt
      

      - name: install Ninja-build
        run: sudo apt install ninja-build

      - name: Git clone 
        if: steps.cache-dpcpp.outputs.cache-hit != 'true'
        run: |
          git clone https://github.com/intel/llvm -b sycl


      - name: Configure
        if: steps.cache-dpcpp.outputs.cache-hit != 'true'
        run: |
          cd llvm
          CUDA_LIB_PATH=/home/docker/opt/cuda/lib64/stubs python3 buildbot/configure.py \
            --llvm-external-projects compiler-rt \
            --cuda \
            --enable-esimd-emulator \
            --cmake-opt="-DCMAKE_INSTALL_PREFIX=../../dpcpp_compiler" \
            --cmake-opt="-DCUDA_TOOLKIT_ROOT_DIR=/home/docker/opt/cuda"

      - name: Compile
        if: steps.cache-dpcpp.outputs.cache-hit != 'true'
        run: |
          cd llvm/build
          ninja all \
            install

        

  hip_build:

    name: Cache HIP ROCM ${{ matrix.rocm }}
    runs-on: [self-hosted]

    strategy:
      matrix:
        rocm: [5.4.3]
    
    steps:
        
      - name: Cache DPCPP
        id: cache-dpcpp
        uses: actions/cache@v3
        with:
          path: dpcpp_compiler
          key: dpcpp-hip-${{ matrix.rocm }}.tar.gz

      - name: install latest cmake
        run: |
          sudo apt-get update
          sudo apt-get install -y ca-certificates gpg wget
          wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | sudo tee /usr/share/keyrings/kitware-archive-keyring.gpg >/dev/null
          echo 'deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ focal main' | sudo tee /etc/apt/sources.list.d/kitware.list >/dev/null
          sudo apt-get update
          sudo rm /usr/share/keyrings/kitware-archive-keyring.gpg
          sudo apt-get install -y kitware-archive-keyring
          sudo apt-get update
          sudo apt-get install -y cmake

      - name: install ROCm
        if: steps.cache-dpcpp.outputs.cache-hit != 'true'
        run: |
          [[ ${{matrix.rocm}} == 4.0.1 ]] && CODENAME=xenial
          [[ ${{matrix.rocm}} == 5.4.3 ]] && CODENAME=focal
          sudo apt install -y libnuma-dev cmake unzip
          wget -q -O - https://repo.radeon.com/rocm/rocm.gpg.key | sudo apt-key add -
          echo "deb [arch=amd64] https://repo.radeon.com/rocm/apt/${{matrix.rocm}} $CODENAME main" | sudo tee /etc/apt/sources.list.d/rocm.list
          printf 'Package: *\nPin: release o=repo.radeon.com\nPin-Priority: 600' | sudo tee /etc/apt/preferences.d/rocm-pin-600
          sudo apt update -y
          sudo apt install -y rocm-dev

      
      - name: install Ninja-build
        run: sudo apt install ninja-build

      - name: Git clone 
        if: steps.cache-dpcpp.outputs.cache-hit != 'true'
        run: |
          git clone https://github.com/intel/llvm -b sycl

      

      
      - name: Configure
        if: steps.cache-dpcpp.outputs.cache-hit != 'true'
        run: |
          cd llvm
          CUDA_LIB_PATH=/home/docker/opt/cuda/lib64/stubs python3 buildbot/configure.py \
            --llvm-external-projects compiler-rt \
            --hip \
            --enable-esimd-emulator \
            --cmake-opt="-DCMAKE_INSTALL_PREFIX=../../dpcpp_compiler" \
            --cmake-opt="-DSYCL_BUILD_PI_HIP_ROCM_DIR=/opt/rocm"

      
      - name: Compile
        if: steps.cache-dpcpp.outputs.cache-hit != 'true'
        run: |
          cd llvm/build
          ninja all \
            install
        