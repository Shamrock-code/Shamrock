name: OpenSYCL

on:
  workflow_call:
    
jobs:
  opensycl_clang:
    name: clang ${{ matrix.clang }}
    runs-on: [self-hosted, cuda1102rocm543]
    
    strategy:
      matrix:
        clang: [15, 16]
        cuda: [11.0.2]
        rocm: [5.4.3]

    steps:

      - name: clone OpenSycl
        run: git clone --recurse-submodules https://github.com/OpenSYCL/OpenSYCL.git


      # Open SYCL requirement
      - name: install Level Zero
        run : |
          wget https://github.com/oneapi-src/level-zero/releases/download/v1.2.3/level-zero-devel_1.2.3+u18.04_amd64.deb
          wget https://github.com/oneapi-src/level-zero/releases/download/v1.2.3/level-zero_1.2.3+u18.04_amd64.deb
          sudo dpkg -i ./level-zero*


      #- name: install CUDA
      #  run: |
      #    mkdir -p ~/opt/cuda
      #    wget -q -O cuda.sh http://developer.download.nvidia.com/compute/cuda/11.0.2/local_installers/cuda_11.0.2_450.51.05_linux.run
      #    sudo sh ./cuda.sh --override --silent --toolkit --no-man-page --no-drm --no-opengl-libs --installpath=~/opt/cuda || true
      #    echo "CUDA Version ${{matrix.cuda}}" | sudo tee ~/opt/cuda/version.txt
      
      - name: install ROCm
        run: |
          [[ ${{matrix.rocm}} == 4.0.1 ]] && CODENAME=xenial
          [[ ${{matrix.rocm}} == 5.4.3 ]] && CODENAME=focal
          sudo apt install -y libnuma-dev cmake unzip
          wget -q -O - https://repo.radeon.com/rocm/rocm.gpg.key | sudo apt-key add -
          echo "deb [arch=amd64] https://repo.radeon.com/rocm/apt/${{matrix.rocm}} $CODENAME main" | sudo tee /etc/apt/sources.list.d/rocm.list
          printf 'Package: *\nPin: release o=repo.radeon.com\nPin-Priority: 600' | sudo tee /etc/apt/preferences.d/rocm-pin-600
          sudo apt update -y
          sudo apt install -y rocm-dev

      - name: install LLVM
        run: |
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh ${{matrix.clang}}
          sudo apt install -y libclang-${{matrix.clang}}-dev clang-tools-${{matrix.clang}} libomp-${{matrix.clang}}-dev
          if [[ "${{matrix.clang}}" == "16" ]]; then
            sudo rm -r /usr/lib/clang/16*
            sudo ln -s /usr/lib/llvm-16/lib/clang/16 /usr/lib/clang/16
          fi
      - name: install boost (from apt)
        run: |
          sudo apt install -y libboost-all-dev





      - name: install Ninja-build
        run: sudo apt install -y ninja-build

      - name: configure OpenSycl
        run: |
          cd OpenSYCL
          cmake -G Ninja \
            -DCMAKE_CXX_COMPILER=/usr/bin/clang++-${{matrix.clang}} \
            -DCLANG_EXECUTABLE_PATH=/usr/bin/clang++-${{matrix.clang}} \
            -DLLVM_DIR=/usr/lib/llvm-${{matrix.clang}}/cmake \
            -DWITH_CUDA_BACKEND=ON -DWITH_ROCM_BACKEND=ON \
            -DWITH_LEVEL_ZERO_BACKEND=OFF \
            -DCUDA_TOOLKIT_ROOT_DIR=~/opt/cuda \
            -DROCM_PATH=/opt/rocm \
            -DCMAKE_INSTALL_PREFIX=../OpenSYCL_comp .

      - name: compile & install OpenSycl
        run: |
          cd OpenSYCL
          ninja install

      - name: cp cuda libs
        run: |
          cp ~/opt/cuda/lib64/stubs/libcuda.so OpenSYCL_comp/lib/libcuda.so
          cp ~/opt/cuda/lib64/stubs/libcuda.so OpenSYCL_comp/lib/libcuda.so.1

      - name: 'Tar opensycl'
        run: tar -cvf opensycl.tar OpenSYCL_comp

      - name: 'Upload Artifact'
        uses: actions/upload-artifact@v3
        with:
          name: OpenSYCL_compiler-clang-${{ matrix.clang }}-${{matrix.cuda}}-${{matrix.rocm}}
          path: opensycl.tar  


  opensycl-nvcxx:
    name: nvcxx ${{matrix.nvhpc}}, CUDA ${{matrix.cuda}}
    runs-on: [self-hosted, raw]
    strategy:
      matrix:
        nvhpc: [22.11]
        cuda: [11.8]
    steps:
    
      - name: clone OpenSycl
        run: git clone --recurse-submodules https://github.com/OpenSYCL/OpenSYCL.git

      - name: install dependencies
        run : |
          sudo apt update -y
          sudo apt install -y cmake libboost-all-dev wget
      - name: install nvcxx
        run: |
          MAJOR_VERSION=$(echo ${{matrix.nvhpc}} | sed 's/\..*//')
          MINOR_VERSION=$(echo ${{matrix.nvhpc}} | sed 's/.*\.//')
          wget -q https://developer.download.nvidia.com/hpc-sdk/ubuntu/amd64/nvhpc-${MAJOR_VERSION}-${MINOR_VERSION}_${{matrix.nvhpc}}_amd64.deb
          wget -q https://developer.download.nvidia.com/hpc-sdk/ubuntu/amd64/nvhpc-20${MAJOR_VERSION}_${{matrix.nvhpc}}_amd64.deb
          sudo apt install -y ./nvhpc-*
      - name: build Open SYCL
        run: |
          cd OpenSYCL
          export NV_HPC_SDK_ROOT=/opt/nvidia/hpc_sdk/Linux_x86_64/${{matrix.nvhpc}}
          export NV_HPC_CUDA_ROOT=${NV_HPC_SDK_ROOT}/cuda/${{matrix.cuda}}
          cmake -G Ninja -DNVCXX_COMPILER=${NV_HPC_SDK_ROOT}/compilers/bin/nvc++ -DWITH_CUDA_BACKEND=ON -DWITH_CUDA_NVCXX_ONLY=ON -DCUDA_TOOLKIT_ROOT_DIR=${NV_HPC_CUDA_ROOT} -DCMAKE_INSTALL_PREFIX=../OpenSYCL_comp .
          ninja install
          cp ${NV_HPC_CUDA_ROOT}/lib64/stubs/libcuda.so ../OpenSYCL_comp/lib/libcuda.so
          cp ${NV_HPC_CUDA_ROOT}/lib64/stubs/libcuda.so ../OpenSYCL_comp/lib/libcuda.so.1

      - name: 'Tar opensycl'
        run: tar -cvf opensycl.tar OpenSYCL_comp

      - name: 'Upload Artifact'
        uses: actions/upload-artifact@v3
        with:
          name: OpenSYCL_compiler-nvcxx--${{matrix.cuda}}-${{matrix.nvhpc}}
          path: opensycl.tar  