// -------------------------------------------------------//
//
// SHAMROCK code for hydrodynamics
// Copyright (c) 2021-2024 Timothée David--Cléris <tim.shamrock@proton.me>
// SPDX-License-Identifier: CeCILL Free Software License Agreement v2.1
// Shamrock is licensed under the CeCILL 2.1 License, see LICENSE for more information
//
// -------------------------------------------------------//

#include "shambase/string.hpp"
#include "shambase/time.hpp"
#include "shamalgs/details/random/random.hpp"
#include "shambackends/math.hpp"
#include "shambackends/typeAliasVec.hpp"
#include "shamcomm/logs.hpp"
#include "shammath/CoordRange.hpp"
#include "shammath/crystalLattice.hpp"
#include "shammath/sphkernels.hpp"
#include "shamsys/legacy/log.hpp"
#include "shamtest/details/TestResult.hpp"
#include "shamtest/shamtest.hpp"
#include <random>
#include <vector>

f64 compute_sum(shammath::CoordRange<f64_3> box, u32 id, std::vector<f64_3> &parts) {

    f64_3 delt = box.delt();

    f64 sum = 0;

    f64_3 target = parts[id];
    // u32 tmp = 0;
    for (i32 pi = -1; pi < 2; pi++) {
        for (i32 pj = -1; pj < 2; pj++) {
            for (i32 pk = -1; pk < 2; pk++) {

                f64_3 offset = {
                    delt.x() * pi,
                    delt.y() * pj,
                    delt.z() * pk,
                };

                for (const auto &ra : parts) {
                    f64_3 d = (ra - target) + offset;

                    f64 dsq = sycl::dot(d, d);

                    sum += shammath::M4<f64>::W_1d(dsq, 5);

                    // if(dsq < 14){
                    // tmp ++;}
                }
            }
        }
    }
    // logger::raw_ln(tmp);

    return sum;
}

bool all_sum_are_equals(shammath::CoordRange<f64_3> box, std::vector<f64_3> &parts) {

    f64 val = 0;

    bool found_diff = false;

    for (u32 i = 0; i < parts.size(); i++) {
        f64 comp = compute_sum(box, i, parts);

        if (i == 0) {
            val = comp;
        }

        if (fabs(comp - val) > 1e-14) {
            found_diff = true;
            logger::raw_ln(box.lower, box.upper, i, comp, val, fabs(comp - val));
        }
    }

    return !found_diff;
}

bool check_periodicity(std::array<i32, 3> coord_min, std::array<i32, 3> coord_max) {

    shammath::CoordRange<f64_3> box{};

    try {

        box = shammath::LatticeHCP<f64_3>::get_periodic_box(1, coord_min, coord_max);

        auto gen = shammath::LatticeHCP<f64_3>::Iterator{1., coord_min, coord_max};

        std::vector<f64_3> parts = gen.next_n(100000);

        // logger::raw_ln(coord_min, coord_max, parts.size());

        return all_sum_are_equals(box, parts);

    } catch (shammath::LatticeError exp) {
        return true;
    }

    return true;
}

TestStart(
    Unittest,
    "shammath/crystalLattice/LatticeHCP/get_periodic_box",
    lattice_get_periodic_box_test,
    1) {
    std::mt19937 eng(0x1111);

    for (u32 i = 0; i < 100; i++) {
        i32 xmin = shamalgs::random::mock_value(eng, -7, 0);
        i32 ymin = shamalgs::random::mock_value(eng, -7, 0);
        i32 zmin = shamalgs::random::mock_value(eng, -7, 0);
        i32 xmax = shamalgs::random::mock_value(eng, 0, 7);
        i32 ymax = shamalgs::random::mock_value(eng, 0, 7);
        i32 zmax = shamalgs::random::mock_value(eng, 0, 7);

        REQUIRE_NAMED(
            shambase::format(
                "check periodicity : ({} {} {}) ({} {} {}) ({} {} {}) ",
                xmin,
                ymin,
                zmin,
                xmax,
                ymax,
                zmax,
                xmax - xmin,
                ymax - ymin,
                zmax - zmin

                ),
            check_periodicity({xmin, ymin, zmin}, {xmax, ymax, zmax}));
    }
}

TestStart(
    Unittest,
    "shammath/crystalLattice/LatticeHCP/nearest_periodic_box_indices",
    lattice_nearest_periodic_box_indices_test,
    1) {
    std::mt19937 eng(0x1111);

    for (u32 i = 0; i < 100; i++) {
        i32 xmin = shamalgs::random::mock_value(eng, -7, 0);
        i32 ymin = shamalgs::random::mock_value(eng, -7, 0);
        i32 zmin = shamalgs::random::mock_value(eng, -7, 0);
        i32 xmax = shamalgs::random::mock_value(eng, 0, 7);
        i32 ymax = shamalgs::random::mock_value(eng, 0, 7);
        i32 zmax = shamalgs::random::mock_value(eng, 0, 7);

        if (xmin == xmax || ymin == ymax || zmin == zmax)
            continue;

        std::pair<std::array<i32, 3>, std::array<i32, 3>> out
            = shammath::LatticeHCP<f64_3>::nearest_periodic_box_indices(
                {xmin, ymin, zmin}, {xmax, ymax, zmax});

        REQUIRE_NAMED(
            shambase::format(
                "check periodicity : ({} {} {}) ({} {} {}) ({} {} {})",
                xmin,
                ymin,
                zmin,
                xmax,
                ymax,
                zmax,
                xmax - xmin,
                ymax - ymin,
                zmax - zmin),
            shammath::LatticeHCP<f64_3>::can_make_periodic_box(out.first, out.second));
    }
}

std::vector<f64_3> reference_set
    = {{-5, 10.969655114602888, 11.430952132988162}, {-3, 10.969655114602888, 11.430952132988162},
       {-1, 10.969655114602888, 11.430952132988162}, {1, 10.969655114602888, 11.430952132988162},
       {3, 10.969655114602888, 11.430952132988162},  {5, 10.969655114602888, 11.430952132988162},
       {7, 10.969655114602888, 11.430952132988162},  {9, 10.969655114602888, 11.430952132988162},
       {-6, 12.701705922171765, 11.430952132988162}, {-4, 12.701705922171765, 11.430952132988162},
       {-2, 12.701705922171765, 11.430952132988162}, {0, 12.701705922171765, 11.430952132988162},
       {2, 12.701705922171765, 11.430952132988162},  {4, 12.701705922171765, 11.430952132988162},
       {6, 12.701705922171765, 11.430952132988162},  {8, 12.701705922171765, 11.430952132988162},
       {-5, 14.433756729740644, 11.430952132988162}, {-3, 14.433756729740644, 11.430952132988162},
       {-1, 14.433756729740644, 11.430952132988162}, {1, 14.433756729740644, 11.430952132988162},
       {3, 14.433756729740644, 11.430952132988162},  {5, 14.433756729740644, 11.430952132988162},
       {7, 14.433756729740644, 11.430952132988162},  {9, 14.433756729740644, 11.430952132988162},
       {-6, 16.165807537309522, 11.430952132988162}, {-4, 16.165807537309522, 11.430952132988162},
       {-2, 16.165807537309522, 11.430952132988162}, {0, 16.165807537309522, 11.430952132988162},
       {2, 16.165807537309522, 11.430952132988162},  {4, 16.165807537309522, 11.430952132988162},
       {6, 16.165807537309522, 11.430952132988162},  {8, 16.165807537309522, 11.430952132988162},
       {-6, 10.392304845413264, 13.063945294843615}, {-4, 10.392304845413264, 13.063945294843615},
       {-2, 10.392304845413264, 13.063945294843615}, {0, 10.392304845413264, 13.063945294843615},
       {2, 10.392304845413264, 13.063945294843615},  {4, 10.392304845413264, 13.063945294843615},
       {6, 10.392304845413264, 13.063945294843615},  {8, 10.392304845413264, 13.063945294843615},
       {-5, 12.12435565298214, 13.063945294843615},  {-3, 12.12435565298214, 13.063945294843615},
       {-1, 12.12435565298214, 13.063945294843615},  {1, 12.12435565298214, 13.063945294843615},
       {3, 12.12435565298214, 13.063945294843615},   {5, 12.12435565298214, 13.063945294843615},
       {7, 12.12435565298214, 13.063945294843615},   {9, 12.12435565298214, 13.063945294843615},
       {-6, 13.856406460551018, 13.063945294843615}, {-4, 13.856406460551018, 13.063945294843615},
       {-2, 13.856406460551018, 13.063945294843615}, {0, 13.856406460551018, 13.063945294843615},
       {2, 13.856406460551018, 13.063945294843615},  {4, 13.856406460551018, 13.063945294843615},
       {6, 13.856406460551018, 13.063945294843615},  {8, 13.856406460551018, 13.063945294843615},
       {-5, 15.588457268119894, 13.063945294843615}, {-3, 15.588457268119894, 13.063945294843615},
       {-1, 15.588457268119894, 13.063945294843615}, {1, 15.588457268119894, 13.063945294843615},
       {3, 15.588457268119894, 13.063945294843615},  {5, 15.588457268119894, 13.063945294843615},
       {7, 15.588457268119894, 13.063945294843615},  {9, 15.588457268119894, 13.063945294843615},
       {-5, 10.969655114602888, 14.696938456699067}, {-3, 10.969655114602888, 14.696938456699067},
       {-1, 10.969655114602888, 14.696938456699067}, {1, 10.969655114602888, 14.696938456699067},
       {3, 10.969655114602888, 14.696938456699067},  {5, 10.969655114602888, 14.696938456699067},
       {7, 10.969655114602888, 14.696938456699067},  {9, 10.969655114602888, 14.696938456699067},
       {-6, 12.701705922171765, 14.696938456699067}, {-4, 12.701705922171765, 14.696938456699067},
       {-2, 12.701705922171765, 14.696938456699067}, {0, 12.701705922171765, 14.696938456699067},
       {2, 12.701705922171765, 14.696938456699067},  {4, 12.701705922171765, 14.696938456699067},
       {6, 12.701705922171765, 14.696938456699067},  {8, 12.701705922171765, 14.696938456699067},
       {-5, 14.433756729740644, 14.696938456699067}, {-3, 14.433756729740644, 14.696938456699067},
       {-1, 14.433756729740644, 14.696938456699067}, {1, 14.433756729740644, 14.696938456699067},
       {3, 14.433756729740644, 14.696938456699067},  {5, 14.433756729740644, 14.696938456699067},
       {7, 14.433756729740644, 14.696938456699067},  {9, 14.433756729740644, 14.696938456699067},
       {-6, 16.165807537309522, 14.696938456699067}, {-4, 16.165807537309522, 14.696938456699067},
       {-2, 16.165807537309522, 14.696938456699067}, {0, 16.165807537309522, 14.696938456699067},
       {2, 16.165807537309522, 14.696938456699067},  {4, 16.165807537309522, 14.696938456699067},
       {6, 16.165807537309522, 14.696938456699067},  {8, 16.165807537309522, 14.696938456699067},
       {-6, 10.392304845413264, 16.32993161855452},  {-4, 10.392304845413264, 16.32993161855452},
       {-2, 10.392304845413264, 16.32993161855452},  {0, 10.392304845413264, 16.32993161855452},
       {2, 10.392304845413264, 16.32993161855452},   {4, 10.392304845413264, 16.32993161855452},
       {6, 10.392304845413264, 16.32993161855452},   {8, 10.392304845413264, 16.32993161855452},
       {-5, 12.12435565298214, 16.32993161855452},   {-3, 12.12435565298214, 16.32993161855452},
       {-1, 12.12435565298214, 16.32993161855452},   {1, 12.12435565298214, 16.32993161855452},
       {3, 12.12435565298214, 16.32993161855452},    {5, 12.12435565298214, 16.32993161855452},
       {7, 12.12435565298214, 16.32993161855452},    {9, 12.12435565298214, 16.32993161855452},
       {-6, 13.856406460551018, 16.32993161855452},  {-4, 13.856406460551018, 16.32993161855452},
       {-2, 13.856406460551018, 16.32993161855452},  {0, 13.856406460551018, 16.32993161855452},
       {2, 13.856406460551018, 16.32993161855452},   {4, 13.856406460551018, 16.32993161855452},
       {6, 13.856406460551018, 16.32993161855452},   {8, 13.856406460551018, 16.32993161855452},
       {-5, 15.588457268119894, 16.32993161855452},  {-3, 15.588457268119894, 16.32993161855452},
       {-1, 15.588457268119894, 16.32993161855452},  {1, 15.588457268119894, 16.32993161855452},
       {3, 15.588457268119894, 16.32993161855452},   {5, 15.588457268119894, 16.32993161855452},
       {7, 15.588457268119894, 16.32993161855452},   {9, 15.588457268119894, 16.32993161855452},
       {-5, 10.969655114602888, 17.96292478040997},  {-3, 10.969655114602888, 17.96292478040997},
       {-1, 10.969655114602888, 17.96292478040997},  {1, 10.969655114602888, 17.96292478040997},
       {3, 10.969655114602888, 17.96292478040997},   {5, 10.969655114602888, 17.96292478040997},
       {7, 10.969655114602888, 17.96292478040997},   {9, 10.969655114602888, 17.96292478040997},
       {-6, 12.701705922171765, 17.96292478040997},  {-4, 12.701705922171765, 17.96292478040997},
       {-2, 12.701705922171765, 17.96292478040997},  {0, 12.701705922171765, 17.96292478040997},
       {2, 12.701705922171765, 17.96292478040997},   {4, 12.701705922171765, 17.96292478040997},
       {6, 12.701705922171765, 17.96292478040997},   {8, 12.701705922171765, 17.96292478040997},
       {-5, 14.433756729740644, 17.96292478040997},  {-3, 14.433756729740644, 17.96292478040997},
       {-1, 14.433756729740644, 17.96292478040997},  {1, 14.433756729740644, 17.96292478040997},
       {3, 14.433756729740644, 17.96292478040997},   {5, 14.433756729740644, 17.96292478040997},
       {7, 14.433756729740644, 17.96292478040997},   {9, 14.433756729740644, 17.96292478040997},
       {-6, 16.165807537309522, 17.96292478040997},  {-4, 16.165807537309522, 17.96292478040997},
       {-2, 16.165807537309522, 17.96292478040997},  {0, 16.165807537309522, 17.96292478040997},
       {2, 16.165807537309522, 17.96292478040997},   {4, 16.165807537309522, 17.96292478040997},
       {6, 16.165807537309522, 17.96292478040997},   {8, 16.165807537309522, 17.96292478040997},
       {-6, 10.392304845413264, 19.595917942265423}, {-4, 10.392304845413264, 19.595917942265423},
       {-2, 10.392304845413264, 19.595917942265423}, {0, 10.392304845413264, 19.595917942265423},
       {2, 10.392304845413264, 19.595917942265423},  {4, 10.392304845413264, 19.595917942265423},
       {6, 10.392304845413264, 19.595917942265423},  {8, 10.392304845413264, 19.595917942265423},
       {-5, 12.12435565298214, 19.595917942265423},  {-3, 12.12435565298214, 19.595917942265423},
       {-1, 12.12435565298214, 19.595917942265423},  {1, 12.12435565298214, 19.595917942265423},
       {3, 12.12435565298214, 19.595917942265423},   {5, 12.12435565298214, 19.595917942265423},
       {7, 12.12435565298214, 19.595917942265423},   {9, 12.12435565298214, 19.595917942265423},
       {-6, 13.856406460551018, 19.595917942265423}, {-4, 13.856406460551018, 19.595917942265423},
       {-2, 13.856406460551018, 19.595917942265423}, {0, 13.856406460551018, 19.595917942265423},
       {2, 13.856406460551018, 19.595917942265423},  {4, 13.856406460551018, 19.595917942265423},
       {6, 13.856406460551018, 19.595917942265423},  {8, 13.856406460551018, 19.595917942265423},
       {-5, 15.588457268119894, 19.595917942265423}, {-3, 15.588457268119894, 19.595917942265423},
       {-1, 15.588457268119894, 19.595917942265423}, {1, 15.588457268119894, 19.595917942265423},
       {3, 15.588457268119894, 19.595917942265423},  {5, 15.588457268119894, 19.595917942265423},
       {7, 15.588457268119894, 19.595917942265423},  {9, 15.588457268119894, 19.595917942265423},
       {-5, 10.969655114602888, 21.228911104120876}, {-3, 10.969655114602888, 21.228911104120876},
       {-1, 10.969655114602888, 21.228911104120876}, {1, 10.969655114602888, 21.228911104120876},
       {3, 10.969655114602888, 21.228911104120876},  {5, 10.969655114602888, 21.228911104120876},
       {7, 10.969655114602888, 21.228911104120876},  {9, 10.969655114602888, 21.228911104120876},
       {-6, 12.701705922171765, 21.228911104120876}, {-4, 12.701705922171765, 21.228911104120876},
       {-2, 12.701705922171765, 21.228911104120876}, {0, 12.701705922171765, 21.228911104120876},
       {2, 12.701705922171765, 21.228911104120876},  {4, 12.701705922171765, 21.228911104120876},
       {6, 12.701705922171765, 21.228911104120876},  {8, 12.701705922171765, 21.228911104120876},
       {-5, 14.433756729740644, 21.228911104120876}, {-3, 14.433756729740644, 21.228911104120876},
       {-1, 14.433756729740644, 21.228911104120876}, {1, 14.433756729740644, 21.228911104120876},
       {3, 14.433756729740644, 21.228911104120876},  {5, 14.433756729740644, 21.228911104120876},
       {7, 14.433756729740644, 21.228911104120876},  {9, 14.433756729740644, 21.228911104120876},
       {-6, 16.165807537309522, 21.228911104120876}, {-4, 16.165807537309522, 21.228911104120876},
       {-2, 16.165807537309522, 21.228911104120876}, {0, 16.165807537309522, 21.228911104120876},
       {2, 16.165807537309522, 21.228911104120876},  {4, 16.165807537309522, 21.228911104120876},
       {6, 16.165807537309522, 21.228911104120876},  {8, 16.165807537309522, 21.228911104120876},
       {-6, 10.392304845413264, 22.861904265976325}, {-4, 10.392304845413264, 22.861904265976325},
       {-2, 10.392304845413264, 22.861904265976325}, {0, 10.392304845413264, 22.861904265976325},
       {2, 10.392304845413264, 22.861904265976325},  {4, 10.392304845413264, 22.861904265976325},
       {6, 10.392304845413264, 22.861904265976325},  {8, 10.392304845413264, 22.861904265976325},
       {-5, 12.12435565298214, 22.861904265976325},  {-3, 12.12435565298214, 22.861904265976325},
       {-1, 12.12435565298214, 22.861904265976325},  {1, 12.12435565298214, 22.861904265976325},
       {3, 12.12435565298214, 22.861904265976325},   {5, 12.12435565298214, 22.861904265976325},
       {7, 12.12435565298214, 22.861904265976325},   {9, 12.12435565298214, 22.861904265976325},
       {-6, 13.856406460551018, 22.861904265976325}, {-4, 13.856406460551018, 22.861904265976325},
       {-2, 13.856406460551018, 22.861904265976325}, {0, 13.856406460551018, 22.861904265976325},
       {2, 13.856406460551018, 22.861904265976325},  {4, 13.856406460551018, 22.861904265976325},
       {6, 13.856406460551018, 22.861904265976325},  {8, 13.856406460551018, 22.861904265976325},
       {-5, 15.588457268119894, 22.861904265976325}, {-3, 15.588457268119894, 22.861904265976325},
       {-1, 15.588457268119894, 22.861904265976325}, {1, 15.588457268119894, 22.861904265976325},
       {3, 15.588457268119894, 22.861904265976325},  {5, 15.588457268119894, 22.861904265976325},
       {7, 15.588457268119894, 22.861904265976325},  {9, 15.588457268119894, 22.861904265976325}};

inline bool compare_ref_set(std::vector<f64_3> &a, std::vector<f64_3> &b) {
    bool ret = a.size() == b.size();
    for (u32 i = 0; i < a.size(); i++) {
        ret = ret && (sham::length2(a[i] - b[i]) < 1e-32);
    }
    return ret;
}

TestStart(Unittest, "shammath/crystalLattice/LatticeHCP/Iterator", lattice_iterator_test, 1) {

    std::array<i32, 3> coord_min = {-3, 6, 7};
    std::array<i32, 3> coord_max = {5, 10, 15};

    auto gen = shammath::LatticeHCP<f64_3>::Iterator{1., coord_min, coord_max};

    std::vector<f64_3> parts = gen.next_n(100000);

    REQUIRE_EQUAL_CUSTOM_COMP(parts, reference_set, compare_ref_set);

    gen = shammath::LatticeHCP<f64_3>::Iterator{1., coord_min, coord_max};
    gen.skip(100);

    auto comp = [](f64_3 a, f64_3 b) {
        return sham::length2(a - b) < 1e-18;
    };

    f64_3 ref = {2, 10.392304845413264, 16.32993161855452};
    REQUIRE_EQUAL_CUSTOM_COMP(gen.next(), ref, comp);
}

std::vector<f64_3> reference_set_discontinuous
    = {{-5, 10.969655114602888, 11.430952132988162}, {3, 10.969655114602888, 11.430952132988162},
       {-1, 10.969655114602888, 11.430952132988162}, {7, 10.969655114602888, 11.430952132988162},
       {-3, 10.969655114602888, 11.430952132988162}, {5, 10.969655114602888, 11.430952132988162},
       {1, 10.969655114602888, 11.430952132988162},  {9, 10.969655114602888, 11.430952132988162},
       {-5, 14.433756729740644, 11.430952132988162}, {3, 14.433756729740644, 11.430952132988162},
       {-1, 14.433756729740644, 11.430952132988162}, {7, 14.433756729740644, 11.430952132988162},
       {-3, 14.433756729740644, 11.430952132988162}, {5, 14.433756729740644, 11.430952132988162},
       {1, 14.433756729740644, 11.430952132988162},  {9, 14.433756729740644, 11.430952132988162},
       {-6, 12.701705922171765, 11.430952132988162}, {2, 12.701705922171765, 11.430952132988162},
       {-2, 12.701705922171765, 11.430952132988162}, {6, 12.701705922171765, 11.430952132988162},
       {-4, 12.701705922171765, 11.430952132988162}, {4, 12.701705922171765, 11.430952132988162},
       {0, 12.701705922171765, 11.430952132988162},  {8, 12.701705922171765, 11.430952132988162},
       {-6, 16.165807537309522, 11.430952132988162}, {2, 16.165807537309522, 11.430952132988162},
       {-2, 16.165807537309522, 11.430952132988162}, {6, 16.165807537309522, 11.430952132988162},
       {-4, 16.165807537309522, 11.430952132988162}, {4, 16.165807537309522, 11.430952132988162},
       {0, 16.165807537309522, 11.430952132988162},  {8, 16.165807537309522, 11.430952132988162},
       {-5, 10.969655114602888, 17.96292478040997},  {3, 10.969655114602888, 17.96292478040997},
       {-1, 10.969655114602888, 17.96292478040997},  {7, 10.969655114602888, 17.96292478040997},
       {-3, 10.969655114602888, 17.96292478040997},  {5, 10.969655114602888, 17.96292478040997},
       {1, 10.969655114602888, 17.96292478040997},   {9, 10.969655114602888, 17.96292478040997},
       {-5, 14.433756729740644, 17.96292478040997},  {3, 14.433756729740644, 17.96292478040997},
       {-1, 14.433756729740644, 17.96292478040997},  {7, 14.433756729740644, 17.96292478040997},
       {-3, 14.433756729740644, 17.96292478040997},  {5, 14.433756729740644, 17.96292478040997},
       {1, 14.433756729740644, 17.96292478040997},   {9, 14.433756729740644, 17.96292478040997},
       {-6, 12.701705922171765, 17.96292478040997},  {2, 12.701705922171765, 17.96292478040997},
       {-2, 12.701705922171765, 17.96292478040997},  {6, 12.701705922171765, 17.96292478040997},
       {-4, 12.701705922171765, 17.96292478040997},  {4, 12.701705922171765, 17.96292478040997},
       {0, 12.701705922171765, 17.96292478040997},   {8, 12.701705922171765, 17.96292478040997},
       {-6, 16.165807537309522, 17.96292478040997},  {2, 16.165807537309522, 17.96292478040997},
       {-2, 16.165807537309522, 17.96292478040997},  {6, 16.165807537309522, 17.96292478040997},
       {-4, 16.165807537309522, 17.96292478040997},  {4, 16.165807537309522, 17.96292478040997},
       {0, 16.165807537309522, 17.96292478040997},   {8, 16.165807537309522, 17.96292478040997},
       {-5, 10.969655114602888, 14.696938456699067}, {3, 10.969655114602888, 14.696938456699067},
       {-1, 10.969655114602888, 14.696938456699067}, {7, 10.969655114602888, 14.696938456699067},
       {-3, 10.969655114602888, 14.696938456699067}, {5, 10.969655114602888, 14.696938456699067},
       {1, 10.969655114602888, 14.696938456699067},  {9, 10.969655114602888, 14.696938456699067},
       {-5, 14.433756729740644, 14.696938456699067}, {3, 14.433756729740644, 14.696938456699067},
       {-1, 14.433756729740644, 14.696938456699067}, {7, 14.433756729740644, 14.696938456699067},
       {-3, 14.433756729740644, 14.696938456699067}, {5, 14.433756729740644, 14.696938456699067},
       {1, 14.433756729740644, 14.696938456699067},  {9, 14.433756729740644, 14.696938456699067},
       {-6, 12.701705922171765, 14.696938456699067}, {2, 12.701705922171765, 14.696938456699067},
       {-2, 12.701705922171765, 14.696938456699067}, {6, 12.701705922171765, 14.696938456699067},
       {-4, 12.701705922171765, 14.696938456699067}, {4, 12.701705922171765, 14.696938456699067},
       {0, 12.701705922171765, 14.696938456699067},  {8, 12.701705922171765, 14.696938456699067},
       {-6, 16.165807537309522, 14.696938456699067}, {2, 16.165807537309522, 14.696938456699067},
       {-2, 16.165807537309522, 14.696938456699067}, {6, 16.165807537309522, 14.696938456699067},
       {-4, 16.165807537309522, 14.696938456699067}, {4, 16.165807537309522, 14.696938456699067},
       {0, 16.165807537309522, 14.696938456699067},  {8, 16.165807537309522, 14.696938456699067},
       {-5, 10.969655114602888, 21.228911104120876}, {3, 10.969655114602888, 21.228911104120876},
       {-1, 10.969655114602888, 21.228911104120876}, {7, 10.969655114602888, 21.228911104120876},
       {-3, 10.969655114602888, 21.228911104120876}, {5, 10.969655114602888, 21.228911104120876},
       {1, 10.969655114602888, 21.228911104120876},  {9, 10.969655114602888, 21.228911104120876},
       {-5, 14.433756729740644, 21.228911104120876}, {3, 14.433756729740644, 21.228911104120876},
       {-1, 14.433756729740644, 21.228911104120876}, {7, 14.433756729740644, 21.228911104120876},
       {-3, 14.433756729740644, 21.228911104120876}, {5, 14.433756729740644, 21.228911104120876},
       {1, 14.433756729740644, 21.228911104120876},  {9, 14.433756729740644, 21.228911104120876},
       {-6, 12.701705922171765, 21.228911104120876}, {2, 12.701705922171765, 21.228911104120876},
       {-2, 12.701705922171765, 21.228911104120876}, {6, 12.701705922171765, 21.228911104120876},
       {-4, 12.701705922171765, 21.228911104120876}, {4, 12.701705922171765, 21.228911104120876},
       {0, 12.701705922171765, 21.228911104120876},  {8, 12.701705922171765, 21.228911104120876},
       {-6, 16.165807537309522, 21.228911104120876}, {2, 16.165807537309522, 21.228911104120876},
       {-2, 16.165807537309522, 21.228911104120876}, {6, 16.165807537309522, 21.228911104120876},
       {-4, 16.165807537309522, 21.228911104120876}, {4, 16.165807537309522, 21.228911104120876},
       {0, 16.165807537309522, 21.228911104120876},  {8, 16.165807537309522, 21.228911104120876},
       {-6, 10.392304845413264, 13.063945294843615}, {2, 10.392304845413264, 13.063945294843615},
       {-2, 10.392304845413264, 13.063945294843615}, {6, 10.392304845413264, 13.063945294843615},
       {-4, 10.392304845413264, 13.063945294843615}, {4, 10.392304845413264, 13.063945294843615},
       {0, 10.392304845413264, 13.063945294843615},  {8, 10.392304845413264, 13.063945294843615},
       {-6, 13.856406460551018, 13.063945294843615}, {2, 13.856406460551018, 13.063945294843615},
       {-2, 13.856406460551018, 13.063945294843615}, {6, 13.856406460551018, 13.063945294843615},
       {-4, 13.856406460551018, 13.063945294843615}, {4, 13.856406460551018, 13.063945294843615},
       {0, 13.856406460551018, 13.063945294843615},  {8, 13.856406460551018, 13.063945294843615},
       {-5, 12.12435565298214, 13.063945294843615},  {3, 12.12435565298214, 13.063945294843615},
       {-1, 12.12435565298214, 13.063945294843615},  {7, 12.12435565298214, 13.063945294843615},
       {-3, 12.12435565298214, 13.063945294843615},  {5, 12.12435565298214, 13.063945294843615},
       {1, 12.12435565298214, 13.063945294843615},   {9, 12.12435565298214, 13.063945294843615},
       {-5, 15.588457268119894, 13.063945294843615}, {3, 15.588457268119894, 13.063945294843615},
       {-1, 15.588457268119894, 13.063945294843615}, {7, 15.588457268119894, 13.063945294843615},
       {-3, 15.588457268119894, 13.063945294843615}, {5, 15.588457268119894, 13.063945294843615},
       {1, 15.588457268119894, 13.063945294843615},  {9, 15.588457268119894, 13.063945294843615},
       {-6, 10.392304845413264, 19.595917942265423}, {2, 10.392304845413264, 19.595917942265423},
       {-2, 10.392304845413264, 19.595917942265423}, {6, 10.392304845413264, 19.595917942265423},
       {-4, 10.392304845413264, 19.595917942265423}, {4, 10.392304845413264, 19.595917942265423},
       {0, 10.392304845413264, 19.595917942265423},  {8, 10.392304845413264, 19.595917942265423},
       {-6, 13.856406460551018, 19.595917942265423}, {2, 13.856406460551018, 19.595917942265423},
       {-2, 13.856406460551018, 19.595917942265423}, {6, 13.856406460551018, 19.595917942265423},
       {-4, 13.856406460551018, 19.595917942265423}, {4, 13.856406460551018, 19.595917942265423},
       {0, 13.856406460551018, 19.595917942265423},  {8, 13.856406460551018, 19.595917942265423},
       {-5, 12.12435565298214, 19.595917942265423},  {3, 12.12435565298214, 19.595917942265423},
       {-1, 12.12435565298214, 19.595917942265423},  {7, 12.12435565298214, 19.595917942265423},
       {-3, 12.12435565298214, 19.595917942265423},  {5, 12.12435565298214, 19.595917942265423},
       {1, 12.12435565298214, 19.595917942265423},   {9, 12.12435565298214, 19.595917942265423},
       {-5, 15.588457268119894, 19.595917942265423}, {3, 15.588457268119894, 19.595917942265423},
       {-1, 15.588457268119894, 19.595917942265423}, {7, 15.588457268119894, 19.595917942265423},
       {-3, 15.588457268119894, 19.595917942265423}, {5, 15.588457268119894, 19.595917942265423},
       {1, 15.588457268119894, 19.595917942265423},  {9, 15.588457268119894, 19.595917942265423},
       {-6, 10.392304845413264, 16.32993161855452},  {2, 10.392304845413264, 16.32993161855452},
       {-2, 10.392304845413264, 16.32993161855452},  {6, 10.392304845413264, 16.32993161855452},
       {-4, 10.392304845413264, 16.32993161855452},  {4, 10.392304845413264, 16.32993161855452},
       {0, 10.392304845413264, 16.32993161855452},   {8, 10.392304845413264, 16.32993161855452},
       {-6, 13.856406460551018, 16.32993161855452},  {2, 13.856406460551018, 16.32993161855452},
       {-2, 13.856406460551018, 16.32993161855452},  {6, 13.856406460551018, 16.32993161855452},
       {-4, 13.856406460551018, 16.32993161855452},  {4, 13.856406460551018, 16.32993161855452},
       {0, 13.856406460551018, 16.32993161855452},   {8, 13.856406460551018, 16.32993161855452},
       {-5, 12.12435565298214, 16.32993161855452},   {3, 12.12435565298214, 16.32993161855452},
       {-1, 12.12435565298214, 16.32993161855452},   {7, 12.12435565298214, 16.32993161855452},
       {-3, 12.12435565298214, 16.32993161855452},   {5, 12.12435565298214, 16.32993161855452},
       {1, 12.12435565298214, 16.32993161855452},    {9, 12.12435565298214, 16.32993161855452},
       {-5, 15.588457268119894, 16.32993161855452},  {3, 15.588457268119894, 16.32993161855452},
       {-1, 15.588457268119894, 16.32993161855452},  {7, 15.588457268119894, 16.32993161855452},
       {-3, 15.588457268119894, 16.32993161855452},  {5, 15.588457268119894, 16.32993161855452},
       {1, 15.588457268119894, 16.32993161855452},   {9, 15.588457268119894, 16.32993161855452},
       {-6, 10.392304845413264, 22.861904265976325}, {2, 10.392304845413264, 22.861904265976325},
       {-2, 10.392304845413264, 22.861904265976325}, {6, 10.392304845413264, 22.861904265976325},
       {-4, 10.392304845413264, 22.861904265976325}, {4, 10.392304845413264, 22.861904265976325},
       {0, 10.392304845413264, 22.861904265976325},  {8, 10.392304845413264, 22.861904265976325},
       {-6, 13.856406460551018, 22.861904265976325}, {2, 13.856406460551018, 22.861904265976325},
       {-2, 13.856406460551018, 22.861904265976325}, {6, 13.856406460551018, 22.861904265976325},
       {-4, 13.856406460551018, 22.861904265976325}, {4, 13.856406460551018, 22.861904265976325},
       {0, 13.856406460551018, 22.861904265976325},  {8, 13.856406460551018, 22.861904265976325},
       {-5, 12.12435565298214, 22.861904265976325},  {3, 12.12435565298214, 22.861904265976325},
       {-1, 12.12435565298214, 22.861904265976325},  {7, 12.12435565298214, 22.861904265976325},
       {-3, 12.12435565298214, 22.861904265976325},  {5, 12.12435565298214, 22.861904265976325},
       {1, 12.12435565298214, 22.861904265976325},   {9, 12.12435565298214, 22.861904265976325},
       {-5, 15.588457268119894, 22.861904265976325}, {3, 15.588457268119894, 22.861904265976325},
       {-1, 15.588457268119894, 22.861904265976325}, {7, 15.588457268119894, 22.861904265976325},
       {-3, 15.588457268119894, 22.861904265976325}, {5, 15.588457268119894, 22.861904265976325},
       {1, 15.588457268119894, 22.861904265976325},  {9, 15.588457268119894, 22.861904265976325}};

TestStart(
    Unittest,
    "shammath/crystalLattice/LatticeHCP/IteratorDiscontinuous",
    lattice_IteratorDiscontinuous_test,
    1) {

    std::array<i32, 3> coord_min = {-3, 6, 7};
    std::array<i32, 3> coord_max = {5, 10, 15};

    auto gen = shammath::LatticeHCP<f64_3>::IteratorDiscontinuous{1., coord_min, coord_max};

    std::vector<f64_3> parts = gen.next_n(100000);

    REQUIRE_EQUAL_CUSTOM_COMP(parts, reference_set_discontinuous, compare_ref_set);

    gen = shammath::LatticeHCP<f64_3>::IteratorDiscontinuous{1., coord_min, coord_max};
    gen.skip(100);

    auto comp = [](f64_3 a, f64_3 b) {
        return sham::length2(a - b) < 1e-18;
    };

    f64_3 ref = {-3, 10.969655114602888, 21.228911104120876};
    REQUIRE_EQUAL_CUSTOM_COMP(gen.next(), ref, comp);
}

template<class T>
void __attribute__((noinline)) trap(const T &val) {}

TestStart(Benchmark, "shammath/crystalLattice/LatticeHCP/Iterator", lattice_iterator_bench, 1) {

    std::array<i32, 3> coord_min = {0, 0, 0};
    std::array<i32, 3> coord_max = {1024, 1024, 1024};

    auto gen = shammath::LatticeHCP<f64_3>::Iterator{1., coord_min, coord_max};

    shambase::Timer t;
    t.start();
    std::vector<f64_3> parts = gen.next_n(2e9);
    t.end();

    trap(parts);

    logger::raw_ln("perf : ", t.elasped_sec());

    gen = shammath::LatticeHCP<f64_3>::Iterator{1., coord_min, coord_max};
    shambase::Timer t2;
    t2.start();
    gen.skip(1e9);
    t2.end();
    trap(gen.next());
    logger::raw_ln("skip_perf : ", t2.elasped_sec());
}

TestStart(
    Benchmark,
    "shammath/crystalLattice/LatticeHCP/IteratorDiscontinuous",
    lattice_IteratorDiscontinuous_bench,
    1) {

    std::array<i32, 3> coord_min = {0, 0, 0};
    std::array<i32, 3> coord_max = {1024, 1024, 1024};

    auto gen = shammath::LatticeHCP<f64_3>::IteratorDiscontinuous{1., coord_min, coord_max};

    shambase::Timer t;
    t.start();
    std::vector<f64_3> parts = gen.next_n(2e9);
    t.end();

    trap(parts);

    logger::raw_ln("perf : ", t.elasped_sec());

    gen = shammath::LatticeHCP<f64_3>::IteratorDiscontinuous{1., coord_min, coord_max};
    shambase::Timer t2;
    t2.start();
    gen.skip(1e9);
    t2.end();
    trap(gen.next());
    logger::raw_ln("skip_perf : ", t2.elasped_sec());
}
